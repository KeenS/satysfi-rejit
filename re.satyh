@stage: 0

let ( &&& ) b1 b2 = &(if ~b1 then ~b2 else false)
let ( ||| ) b1 b2 = &(if ~b1 then true else ~b2)

module Char : sig
  type t
  val equal : t -> t -> bool
  val at : int -> string -> t
end = struct
  type t = string
  let equal = string-same
  let at i s = string-sub s i 1
end

module List: sig
  val fold-right : ('a -> 'b -> 'b) -> 'b -> 'a list -> 'b
  val length : 'a list -> int
end = struct
    let-rec fold-right
      | f init []        = init
      | f init (x :: xs) = f x (fold-right f init xs)

    let length lst =
      fold-right (fun _ i -> i + 1) 0 lst
end

type 'a vm-inst =
| MATCH
| CHAR of 'a
| KLEENE of ('a vm-inst) list
| OR of ('a vm-inst) list * ('a vm-inst) list

let compile iseq =
  % pc = index of iseq
  let-rec loop iseq pc sp len s =
    match iseq with
      | [] -> &(true)
      | inst :: iseq ->
        (match inst with
          | MATCH -> &(true)
          | CHAR c ->
            &(let sp = ~(sp) in
              ~(&(sp < ~len) &&&
                &(string-same ~c (string-sub ~s sp 1)) &&&
                (loop iseq (pc + 1) &(sp + 1) len s)
               )
             )
          | KLEENE code ->
            &(let sp = ~(sp) in
              let-rec kleene sp =
                let r = ~(loop code (pc + 1) &sp len s) in
                if r
                then kleene (sp + 1)
                else (sp, true)
              in
              let (sp, r) = kleene sp in
              ~(&r &&& (loop iseq (pc + 1 + (List.length code)) &sp len s))
              )
          | OR (code1, code2) ->
            &(let sp = ~(sp) in
              ~((loop code1 (pc + 1                    ) &sp len s) |||
                (loop code2 (pc + 1 + List.length code1) &sp len s)
               )
             )
          )
  in
  &(let f s =
      let sp = 0 in
      let len = string-length s in
      ~(loop iseq 0 &sp &len &s)
    in f)
