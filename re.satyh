@stage: 0

let ( &&& ) b1 b2 = &(if ~b1 then ~b2 else false)
let ( ||| ) b1 b2 = &(if ~b1 then true else ~b2)

module Char : sig
  type t
  val equal : t -> t -> bool
  val at : int -> string -> t
end = struct
  type t = string
  let equal = string-same
  let at i s = string-sub s i 1
end

module List: sig
  val fold-right : ('a -> 'b -> 'b) -> 'b -> 'a list -> 'b
  val length : 'a list -> int
end = struct
    let-rec fold-right
      | f init []        = init
      | f init (x :: xs) = f x (fold-right f init xs)

    let length lst =
      fold-right (fun _ i -> i + 1) 0 lst
end

type anchor = BOF | EOF | BOL | EOL | NOWHERE

type vm-inst =
| MATCH
| CHAR of string
| ANY
| STRING of string
| KLEENE of vm-inst list
| OR of vm-inst list * vm-inst list
| ANCHOR of anchor

let compile iseq =
  % pc = index of iseq
  let-rec loop iseq pc sp len s =
    match iseq with
      | [] -> &(Some(~sp))
      | inst :: iseq ->
        (match inst with
          | MATCH -> &(Some(~sp))
          | CHAR c ->
            &(let sp = ~(sp) in
              if ~(&(sp < ~len) &&& &(string-same ~(lift-string c) (string-sub ~s sp 1)))
              then ~(loop iseq (pc + 1) &(sp + 1) len s)
              else None
             )
          | ANY ->
            &(let sp = ~(sp) in
              if sp < ~len
              then ~(loop iseq (pc + 1) &(sp + 1) len s)
              else None
             )
          | STRING c ->
            let l = string-length c in
            &(let sp = ~(sp) in
              if ~(&(sp < ~len) &&& &(string-same ~(lift-string c) (string-sub ~s sp ~(lift-int l))))
              then ~(loop iseq (pc + 1) &(sp + ~(lift-int l)) len s)
              else None
             )
          | KLEENE code ->
            &(let sp = ~(sp) in
              let-rec kleene sp =
                match ~(loop code (pc + 1) &sp len s) with
                  | Some(sp) -> kleene sp
                  | None -> sp
              in
              let sp = kleene sp in
              ~(loop iseq (pc + 1 + (List.length code)) &sp len s)
              )
          | OR (code1, code2) ->
            &(let sp = ~(sp) in
              match ~(loop code1 (pc + 1) &sp len s) with
                | Some(v) -> Some(v)
                | None -> ~(loop code2 (pc + 1 + List.length code1) &sp len s)
             )
          | ANCHOR a ->
            let newline = string-unexplode [10] in
            let gen-code sp = match a with
                  | BOF -> &(~sp == 0)
                  | EOF -> &(~sp == string-length ~s)
                  | BOL -> (&(~sp == 0) ||| &(string-same (string-sub ~s ~sp 1) ~(lift-string newline)))
                  | EOL -> (&(~sp == string-length ~s) ||| &(string-same (string-sub ~s ~sp 1) ~(lift-string newline)))
                  | NOWHERE -> &false
            in
            &(let sp = ~(sp) in
              if ~(gen-code &sp)
              then ~(loop iseq (pc + 1) &sp len s)
              else None
             )
          )
  in
  &(let f s =
      let sp = 0 in
      let len = string-length s in
      ~(loop iseq 0 &sp &len &s)
    in f)
